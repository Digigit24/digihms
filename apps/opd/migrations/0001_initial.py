# Generated by Django 4.2.7 on 2025-10-23 09:24

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('doctors', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('patients', '0001_initial'),
        ('appointments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicalNote',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ehr_number', models.CharField(blank=True, help_text='Electronic Health Record ID', max_length=50)),
                ('note_date', models.DateTimeField(auto_now_add=True)),
                ('present_complaints', models.TextField(blank=True, help_text="Patient's presenting complaints")),
                ('observation', models.TextField(blank=True, help_text="Doctor's observations")),
                ('diagnosis', models.TextField(blank=True, help_text='Clinical diagnosis')),
                ('investigation', models.TextField(blank=True, help_text='Investigations ordered')),
                ('treatment_plan', models.TextField(blank=True, help_text='Recommended treatment')),
                ('medicines_prescribed', models.JSONField(blank=True, default=list, help_text='List of prescribed medicines')),
                ('doctor_advice', models.TextField(blank=True, help_text="Doctor's advice to patient")),
                ('suggested_surgery_name', models.CharField(blank=True, help_text='Name of suggested surgery if any', max_length=200)),
                ('suggested_surgery_reason', models.TextField(blank=True, help_text='Reason for suggesting surgery')),
                ('next_followup_date', models.DateField(blank=True, help_text='Next follow-up appointment date', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Clinical Note',
                'verbose_name_plural': 'Clinical Notes',
                'db_table': 'clinical_notes',
                'ordering': ['-note_date'],
            },
        ),
        migrations.CreateModel(
            name='OPDBill',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('bill_number', models.CharField(help_text='Unique bill identifier (e.g., OPD-BILL/20231223/001)', max_length=50, unique=True)),
                ('bill_date', models.DateTimeField(auto_now_add=True)),
                ('opd_type', models.CharField(choices=[('consultation', 'Consultation'), ('follow_up', 'Follow-up'), ('emergency', 'Emergency')], default='consultation', max_length=20)),
                ('opd_subtype', models.CharField(blank=True, default='NA', help_text='Additional classification if needed', max_length=50)),
                ('charge_type', models.CharField(choices=[('first_visit', 'First Visit'), ('revisit', 'Revisit'), ('emergency', 'Emergency')], default='first_visit', max_length=20)),
                ('diagnosis', models.TextField(blank=True)),
                ('remarks', models.TextField(blank=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_percent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payable_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payment_mode', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('upi', 'UPI'), ('bank', 'Bank Transfer'), ('multiple', 'Multiple Modes')], default='cash', max_length=20)),
                ('payment_details', models.JSONField(blank=True, default=dict, help_text='Store multiple payment details')),
                ('received_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('balance_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payment_status', models.CharField(choices=[('unpaid', 'Unpaid'), ('partial', 'Partially Paid'), ('paid', 'Paid')], default='unpaid', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'OPD Bill',
                'verbose_name_plural': 'OPD Bills',
                'db_table': 'opd_bills',
                'ordering': ['-bill_date'],
            },
        ),
        migrations.CreateModel(
            name='ProcedureBill',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('bill_number', models.CharField(help_text='Unique bill identifier (e.g., PROC-BILL/20231223/001)', max_length=50, unique=True)),
                ('bill_date', models.DateTimeField(auto_now_add=True)),
                ('bill_type', models.CharField(choices=[('hospital', 'Hospital'), ('diagnostic', 'Diagnostic Center'), ('external', 'External Lab')], default='hospital', max_length=20)),
                ('category', models.CharField(blank=True, help_text='Additional categorization', max_length=50)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_percent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payable_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payment_mode', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('upi', 'UPI'), ('bank', 'Bank Transfer'), ('multiple', 'Multiple Modes')], default='cash', max_length=20)),
                ('payment_details', models.JSONField(blank=True, default=dict, help_text='Store multiple payment details')),
                ('received_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('balance_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payment_status', models.CharField(choices=[('unpaid', 'Unpaid'), ('partial', 'Partially Paid'), ('paid', 'Paid')], default='unpaid', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Procedure Bill',
                'verbose_name_plural': 'Procedure Bills',
                'db_table': 'procedure_bills',
                'ordering': ['-bill_date'],
            },
        ),
        migrations.CreateModel(
            name='ProcedureBillItem',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('particular_name', models.CharField(help_text='Store name even if procedure is deleted', max_length=200)),
                ('note', models.TextField(blank=True)),
                ('quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_charge', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('amount', models.DecimalField(decimal_places=2, help_text='Quantity Ã— Unit Charge', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('item_order', models.IntegerField(default=0, help_text='Display order in bill')),
            ],
            options={
                'verbose_name': 'Procedure Bill Item',
                'verbose_name_plural': 'Procedure Bill Items',
                'db_table': 'procedure_bill_items',
                'ordering': ['item_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProcedureMaster',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(help_text='Unique procedure code', max_length=50, unique=True)),
                ('category', models.CharField(choices=[('laboratory', 'Laboratory'), ('radiology', 'Radiology'), ('cardiology', 'Cardiology'), ('pathology', 'Pathology'), ('ultrasound', 'Ultrasound'), ('ct_scan', 'CT Scan'), ('mri', 'MRI'), ('ecg', 'ECG'), ('xray', 'X-Ray'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('default_charge', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Procedure Master',
                'verbose_name_plural': 'Procedure Masters',
                'db_table': 'procedure_masters',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('visit_number', models.CharField(help_text='Unique visit identifier (e.g., OPD/20231223/001)', max_length=50, unique=True)),
                ('visit_date', models.DateField(auto_now_add=True)),
                ('visit_type', models.CharField(choices=[('new', 'New Visit'), ('follow_up', 'Follow-up'), ('emergency', 'Emergency')], default='new', max_length=20)),
                ('entry_time', models.DateTimeField(auto_now_add=True)),
                ('is_follow_up', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('called', 'Called'), ('in_consultation', 'In Consultation'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='waiting', max_length=20)),
                ('queue_position', models.IntegerField(blank=True, help_text='Position in waiting queue', null=True)),
                ('consultation_start_time', models.DateTimeField(blank=True, null=True)),
                ('consultation_end_time', models.DateTimeField(blank=True, null=True)),
                ('payment_status', models.CharField(choices=[('unpaid', 'Unpaid'), ('partial', 'Partially Paid'), ('paid', 'Paid')], default='unpaid', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('balance_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, help_text='For scheduled visits', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opd_visit', to='appointments.appointment')),
                ('created_by', models.ForeignKey(help_text='Receptionist who created the visit', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_visits', to=settings.AUTH_USER_MODEL)),
                ('doctor', models.ForeignKey(blank=True, help_text='Assigned when patient is called', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opd_visits', to='doctors.doctorprofile')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='opd_visits', to='patients.patientprofile')),
                ('referred_by', models.ForeignKey(blank=True, help_text='Referring doctor if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referred_visits', to='doctors.doctorprofile')),
            ],
            options={
                'verbose_name': 'OPD Visit',
                'verbose_name_plural': 'OPD Visits',
                'db_table': 'opd_visits',
                'ordering': ['-visit_date', '-entry_time'],
            },
        ),
        migrations.CreateModel(
            name='VisitFinding',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('finding_date', models.DateTimeField(auto_now_add=True)),
                ('finding_type', models.CharField(choices=[('examination', 'General Examination'), ('systemic', 'Systemic Examination')], default='examination', max_length=20)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Temperature in Â°F', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('90.0')), django.core.validators.MaxValueValidator(Decimal('110.0'))])),
                ('pulse', models.IntegerField(blank=True, help_text='Pulse rate per minute', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)])),
                ('bp_systolic', models.IntegerField(blank=True, help_text='Systolic blood pressure', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('bp_diastolic', models.IntegerField(blank=True, help_text='Diastolic blood pressure', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.5')), django.core.validators.MaxValueValidator(Decimal('500.0'))])),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('30.0')), django.core.validators.MaxValueValidator(Decimal('300.0'))])),
                ('bmi', models.DecimalField(blank=True, decimal_places=2, editable=False, help_text='Body Mass Index (auto-calculated)', max_digits=5, null=True)),
                ('spo2', models.IntegerField(blank=True, help_text='Oxygen saturation percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('respiratory_rate', models.IntegerField(blank=True, help_text='Breaths per minute', null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('tongue', models.CharField(blank=True, help_text='Tongue examination findings', max_length=200)),
                ('throat', models.CharField(blank=True, help_text='Throat examination findings', max_length=200)),
                ('cns', models.CharField(blank=True, help_text='Central Nervous System findings', max_length=200)),
                ('rs', models.CharField(blank=True, help_text='Respiratory System findings', max_length=200)),
                ('cvs', models.CharField(blank=True, help_text='Cardiovascular System findings', max_length=200)),
                ('pa', models.CharField(blank=True, help_text='Per Abdomen findings', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_findings', to=settings.AUTH_USER_MODEL)),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='opd.visit')),
            ],
            options={
                'verbose_name': 'Visit Finding',
                'verbose_name_plural': 'Visit Findings',
                'db_table': 'visit_findings',
                'ordering': ['-finding_date'],
            },
        ),
        migrations.CreateModel(
            name='VisitAttachment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('file', models.FileField(help_text='Upload medical documents', upload_to='opd/attachments/%Y/%m/')),
                ('file_name', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('xray', 'X-Ray'), ('report', 'Lab Report'), ('prescription', 'Prescription'), ('scan', 'Scan'), ('document', 'Document'), ('other', 'Other')], default='other', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the attachment')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_attachments', to=settings.AUTH_USER_MODEL)),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='opd.visit')),
            ],
            options={
                'verbose_name': 'Visit Attachment',
                'verbose_name_plural': 'Visit Attachments',
                'db_table': 'visit_attachments',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcedurePackage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(help_text='Unique package code', max_length=50, unique=True)),
                ('total_charge', models.DecimalField(decimal_places=2, help_text='Sum of individual procedure charges', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discounted_charge', models.DecimalField(decimal_places=2, help_text='Package discounted price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('procedures', models.ManyToManyField(related_name='packages', to='opd.proceduremaster')),
            ],
            options={
                'verbose_name': 'Procedure Package',
                'verbose_name_plural': 'Procedure Packages',
                'db_table': 'procedure_packages',
                'ordering': ['name'],
            },
        ),
        migrations.AddIndex(
            model_name='proceduremaster',
            index=models.Index(fields=['code'], name='proc_master_code_idx'),
        ),
        migrations.AddIndex(
            model_name='proceduremaster',
            index=models.Index(fields=['category'], name='proc_master_category_idx'),
        ),
        migrations.AddIndex(
            model_name='proceduremaster',
            index=models.Index(fields=['is_active'], name='proc_master_active_idx'),
        ),
        migrations.AddField(
            model_name='procedurebillitem',
            name='procedure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bill_items', to='opd.proceduremaster'),
        ),
        migrations.AddField(
            model_name='procedurebillitem',
            name='procedure_bill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='opd.procedurebill'),
        ),
        migrations.AddField(
            model_name='procedurebill',
            name='billed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_procedure_bills', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='procedurebill',
            name='doctor',
            field=models.ForeignKey(help_text='Doctor who ordered the procedures', on_delete=django.db.models.deletion.PROTECT, related_name='ordered_procedures', to='doctors.doctorprofile'),
        ),
        migrations.AddField(
            model_name='procedurebill',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='procedure_bills', to='opd.visit'),
        ),
        migrations.AddField(
            model_name='opdbill',
            name='billed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_opd_bills', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='opdbill',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='opd_bills', to='doctors.doctorprofile'),
        ),
        migrations.AddField(
            model_name='opdbill',
            name='visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='opd_bill', to='opd.visit'),
        ),
        migrations.AddField(
            model_name='clinicalnote',
            name='created_by',
            field=models.ForeignKey(help_text='Doctor who created the note', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_clinical_notes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='clinicalnote',
            name='referred_doctor',
            field=models.ForeignKey(blank=True, help_text='Doctor to whom patient is referred', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_referrals', to='doctors.doctorprofile'),
        ),
        migrations.AddField(
            model_name='clinicalnote',
            name='visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_note', to='opd.visit'),
        ),
        migrations.AddIndex(
            model_name='visitfinding',
            index=models.Index(fields=['visit', '-finding_date'], name='finding_visit_date_idx'),
        ),
        migrations.AddIndex(
            model_name='visitattachment',
            index=models.Index(fields=['visit'], name='attachment_visit_idx'),
        ),
        migrations.AddIndex(
            model_name='visitattachment',
            index=models.Index(fields=['file_type'], name='attachment_type_idx'),
        ),
        migrations.AddIndex(
            model_name='visit',
            index=models.Index(fields=['visit_number'], name='visit_number_idx'),
        ),
        migrations.AddIndex(
            model_name='visit',
            index=models.Index(fields=['patient', 'visit_date'], name='visit_patient_date_idx'),
        ),
        migrations.AddIndex(
            model_name='visit',
            index=models.Index(fields=['doctor', 'visit_date'], name='visit_doctor_date_idx'),
        ),
        migrations.AddIndex(
            model_name='visit',
            index=models.Index(fields=['status', 'visit_date'], name='visit_status_date_idx'),
        ),
        migrations.AddIndex(
            model_name='visit',
            index=models.Index(fields=['payment_status'], name='visit_payment_idx'),
        ),
        migrations.AddIndex(
            model_name='procedurepackage',
            index=models.Index(fields=['code'], name='proc_package_code_idx'),
        ),
        migrations.AddIndex(
            model_name='procedurepackage',
            index=models.Index(fields=['is_active'], name='proc_package_active_idx'),
        ),
        migrations.AddIndex(
            model_name='procedurebill',
            index=models.Index(fields=['bill_number'], name='proc_bill_number_idx'),
        ),
        migrations.AddIndex(
            model_name='procedurebill',
            index=models.Index(fields=['visit'], name='proc_bill_visit_idx'),
        ),
        migrations.AddIndex(
            model_name='procedurebill',
            index=models.Index(fields=['doctor', 'bill_date'], name='proc_bill_doctor_date_idx'),
        ),
        migrations.AddIndex(
            model_name='procedurebill',
            index=models.Index(fields=['payment_status'], name='proc_bill_payment_idx'),
        ),
        migrations.AddIndex(
            model_name='opdbill',
            index=models.Index(fields=['bill_number'], name='opd_bill_number_idx'),
        ),
        migrations.AddIndex(
            model_name='opdbill',
            index=models.Index(fields=['visit'], name='opd_bill_visit_idx'),
        ),
        migrations.AddIndex(
            model_name='opdbill',
            index=models.Index(fields=['doctor', 'bill_date'], name='opd_bill_doctor_date_idx'),
        ),
        migrations.AddIndex(
            model_name='opdbill',
            index=models.Index(fields=['payment_status'], name='opd_bill_payment_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalnote',
            index=models.Index(fields=['visit'], name='clinical_note_visit_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalnote',
            index=models.Index(fields=['ehr_number'], name='clinical_note_ehr_idx'),
        ),
    ]
